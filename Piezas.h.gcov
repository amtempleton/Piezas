        -:    0:Source:Piezas.h
        -:    0:Programs:2
        -:    1:#ifndef _PIEZAS_H_
        -:    2:#define _PIEZAS_H_
        -:    3:#include <vector>
        -:    4:
        -:    5:const int BOARD_ROWS = 3;
        -:    6:const int BOARD_COLS = 4;
        -:    7:
        -:    8:enum Piece
        -:    9:{
        -:   10:  	X = 'X',
        -:   11:  	O = 'O',
        -:   12:  	Invalid = '?',
        -:   13:  	Blank = ' '
        -:   14:};
        -:   15:
        -:   16:/**
        -:   17: * Class for representing a Piezas vertical board, which is roughly based
        -:   18: * on the game "Connect Four" where pieces are placed in a column and 
        -:   19: * fall to the bottom of the column, or on top of other pieces already in
        -:   20: * that column. For an illustration of the board, see:
        -:   21: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   22: *
        -:   23: * Board coordinates [row,col] should match with:
        -:   24: * [2,0][2,1][2,2][2,3]
        -:   25: * [1,0][1,1][1,2][1,3]
        -:   26: * [0,0][0,1][0,2][0,3]
        -:   27: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   28: * dropped in column 2 should take [1,2].
        -:   29:**/
function _ZN6PiezasD2Ev called 16 returned 100% blocks executed 100%
       16:   30:class Piezas
call    0 returned 16
        -:   31:{
        -:   32:  private:
        -:   33:  	std::vector < std::vector<Piece> > board;
        -:   34:  	Piece turn;
        -:   35:
        -:   36:  public:
        -:   37:  	/**
        -:   38:     * Constructor sets an empty board (3 rows, 4 columns) and 
        -:   39:     * specifies it is X's turn first
        -:   40:    **/
        -:   41:  	Piezas();
        -:   42:
        -:   43:  	/**
        -:   44:     * Resets each board location to the Blank Piece value, with a board of the
        -:   45:     * same size as previously specified
        -:   46:    **/
        -:   47:  	void reset();
        -:   48:
        -:   49:  	/**
        -:   50:  	 * Places a piece of the current turn on the board, returns what
        -:   51:  	 * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   52:  	 * NOT allow to place a piece in a location where a column is full.
        -:   53:  	 * In that case, placePiece returns Piece Blank value 
        -:   54:  	 * Out of bounds coordinates return the Piece Invalid value
        -:   55:     * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   56:  	**/ 
        -:   57:  	Piece dropPiece(int column);
        -:   58:
        -:   59:  	/**
        -:   60:  	 * Returns what piece is at the provided coordinates, or Blank if there
        -:   61:  	 * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   62:  	**/
        -:   63:  	Piece pieceAt(int row, int column);
        -:   64:
        -:   65:    /**
        -:   66:     * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   67:     * is not over, or Blank if the board is filled and no one has won ("tie").
        -:   68:     * For a game to be over, all locations on the board must be filled with X's 
        -:   69:     * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:   70:     * the most adjacent pieces in a single line. Lines can go either vertically
        -:   71:     * or horizontally. If both X's and O's have the same number of pieces in a
        -:   72:     * line, it is a tie.
        -:   73:    **/
        -:   74:  	Piece gameState();
        -:   75:};
        -:   76:
        -:   77:#endif /*_PIEZAS_H_*/
