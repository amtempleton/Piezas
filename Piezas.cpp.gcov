        -:    0:Source:Piezas.cpp
        -:    0:Programs:2
        -:    1:#include "Piezas.h"
        -:    2:#include <vector>
        -:    3:#include <iostream>
        -:    4:using namespace std;
        -:    5:/** CLASS Piezas
        -:    6: * Class for representing a Piezas vertical board, which is roughly based
        -:    7: * on the game "Connect Four" where pieces are placed in a column and
        -:    8: * fall to the bottom of the column, or on top of other pieces already in
        -:    9: * that column. For an illustration of the board, see:
        -:   10: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   11: *
        -:   12: * Board coordinates [row,col] should match with:
        -:   13: * [2,0][2,1][2,2][2,3]
        -:   14: * [1,0][1,1][1,2][1,3]
        -:   15: * [0,0][0,1][0,2][0,3]
        -:   16: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   17: * dropped in column 2 should take [1,2].
        -:   18:**/
        -:   19:
        -:   20:
        -:   21:/**
        -:   22: * Constructor sets an empty board (default 3 rows, 4 columns) and
        -:   23: * specifies it is X's turn first
        -:   24:**/
function _ZN6PiezasC2Ev called 16 returned 100% blocks executed 93%
       16:   25:Piezas::Piezas()
call    0 returned 16
call    1 never executed
        -:   26:{
       16:   27:    board.resize(BOARD_ROWS);
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       64:   28:    for(int i =0; i< BOARD_ROWS; i++)
branch  0 taken 48 (fallthrough)
branch  1 taken 16
        -:   29:    {
       48:   30:        board[i].resize(BOARD_COLS);
call    0 returned 48
call    1 returned 48
branch  2 taken 48 (fallthrough)
branch  3 taken 0 (throw)
      240:   31:        for(int j = 0; j < BOARD_COLS; j++)
branch  0 taken 192 (fallthrough)
branch  1 taken 48
        -:   32:        {
      192:   33:          board[i][j] = Blank;
call    0 returned 192
call    1 returned 192
        -:   34:        }
        -:   35:    }
        -:   36:
       16:   37:    turn = X;
       16:   38:}
        -:   39:
        -:   40:/**
        -:   41: * Resets each board location to the Blank Piece value, with a board of the
        -:   42: * same size as previously specified
        -:   43:**/
function _ZN6Piezas5resetEv called 1 returned 100% blocks executed 100%
        1:   44:void Piezas::reset()
        -:   45:{
        4:   46:  for(int i =0; i< BOARD_ROWS; i++)
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        -:   47:  {
       15:   48:      for(int j = 0; j < BOARD_COLS; j++)
branch  0 taken 12 (fallthrough)
branch  1 taken 3
        -:   49:      {
       12:   50:        board[i][j] = Blank;
call    0 returned 12
call    1 returned 12
        -:   51:      }
        -:   52:  }
        1:   53:}
        -:   54:
        -:   55:/**
        -:   56: * Places a piece of the current turn on the board, returns what
        -:   57: * piece is placed, and toggles which Piece's turn it is. dropPiece does
        -:   58: * NOT allow to place a piece in a location where a column is full.
        -:   59: * In that case, placePiece returns Piece Blank value
        -:   60: * Out of bounds coordinates return the Piece Invalid value
        -:   61: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   62:**/
function _ZN6Piezas9dropPieceEi called 47 returned 100% blocks executed 100%
       47:   63:Piece Piezas::dropPiece(int column)
        -:   64:{
        -:   65:      //can enter column 0-3
       47:   66:      if(column > 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 46
        1:   67:        return Invalid;
        -:   68:
       90:   69:      for(int i = 0; i < BOARD_ROWS; i++)
branch  0 taken 89 (fallthrough)
branch  1 taken 1
        -:   70:      {
        -:   71:        //drop piece
       89:   72:        if(board[i][column] == Blank)
call    0 returned 89
call    1 returned 89
branch  2 taken 45 (fallthrough)
branch  3 taken 44
        -:   73:        {
       45:   74:            board[i][column] = turn;
call    0 returned 45
call    1 returned 45
        -:   75:
        -:   76:            //toggle turn
       45:   77:            if(turn == X)
branch  0 taken 24 (fallthrough)
branch  1 taken 21
       24:   78:              turn = O;
        -:   79:            else
       21:   80:              turn  = X;
        -:   81:
       45:   82:            return board[i][column];
call    0 returned 45
call    1 returned 45
        -:   83:        }//if
        -:   84:      }//for
        -:   85:
        1:   86:      return Blank;
        -:   87:}
        -:   88:
        -:   89:/**
        -:   90: * Returns what piece is at the provided coordinates, or Blank if there
        -:   91: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   92:**/
function _ZN6Piezas7pieceAtEii called 7 returned 100% blocks executed 100%
        7:   93:Piece Piezas::pieceAt(int row, int column)
        -:   94:{
        -:   95:
        7:   96:    if(row < 0 || row >= BOARD_ROWS || column < 0 || column >= BOARD_COLS)
branch  0 taken 6 (fallthrough)
branch  1 taken 1
branch  2 taken 5 (fallthrough)
branch  3 taken 1
branch  4 taken 4 (fallthrough)
branch  5 taken 1
branch  6 taken 1 (fallthrough)
branch  7 taken 3
        -:   97:    {
        4:   98:      return Invalid;
        -:   99:    }
        -:  100:    else
        -:  101:    {
        3:  102:        return board[row][column];
call    0 returned 3
call    1 returned 3
        -:  103:    }
        -:  104:}
        -:  105:
        -:  106:/**
        -:  107: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  108: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  109: * For a game to be over, all locations on the board must be filled with X's
        -:  110: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  111: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  112: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  113: * line, it is a tie.
        -:  114:**/
function _ZN6Piezas9gameStateEv called 5 returned 100% blocks executed 95%
        5:  115:Piece Piezas::gameState()
        -:  116:{
        5:  117:    int xcount = 0;
        5:  118:    int ocount = 0;
        5:  119:    int xcolcount = 0;
        5:  120:    int ocolcount = 0;
       10:  121:    vector<int> xtotal;
call    0 returned 5
call    1 returned 5
call    2 never executed
       10:  122:    vector<int> ototal;
call    0 returned 5
call    1 returned 5
call    2 never executed
       10:  123:    vector<int> xcoltotal;
call    0 returned 5
call    1 returned 5
call    2 never executed
       10:  124:    vector<int> ocoltotal;
call    0 returned 5
call    1 returned 5
call    2 never executed
        -:  125:
        5:  126:    cout << "Checking if game is over ... ";
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:  127:
        -:  128:    //game not over
       14:  129:    for(int a = 0; a < BOARD_ROWS; a++)
branch  0 taken 11 (fallthrough)
branch  1 taken 3
        -:  130:    {
       47:  131:      for(int b = 0; b < BOARD_COLS; b++)
branch  0 taken 38 (fallthrough)
branch  1 taken 9
        -:  132:      {
       38:  133:        if(board[a][b] == Blank){
call    0 returned 38
call    1 returned 38
branch  2 taken 2 (fallthrough)
branch  3 taken 36
        2:  134:          cout << "Game Not Over\n";
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  135:          return Invalid;
        -:  136:        }
        -:  137:      }
        -:  138:    }
        -:  139:
        3:  140:    cout << "Game is over\n";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
       12:  141:    for(int i = 0; i < BOARD_ROWS; i++)
branch  0 taken 9 (fallthrough)
branch  1 taken 3
        -:  142:    {
        -:  143:      //reset
        9:  144:      xcount = 0;
        9:  145:      ocount = 0;
        -:  146:
        9:  147:      if(board[i][1] == X){
call    0 returned 9
call    1 returned 9
branch  2 taken 2 (fallthrough)
branch  3 taken 7
        2:  148:        xcount++;
        2:  149:        if(board[i][1] == board[i][0])
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        -:  150:        {
        1:  151:          xcount++;
        -:  152:        }
        2:  153:        if(board[i][1] == board[i][2])
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        -:  154:        {
        2:  155:          xcount++;
        -:  156:        }
        2:  157:        if(board[i][1] == board[i][3])
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        -:  158:        {
        1:  159:          xcount++;
        -:  160:        }
        -:  161:      }
        7:  162:      else if(board[i][1] == O){
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:  163:        ocount++;
        7:  164:        if(board[i][1] == board[i][0])
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 2 (fallthrough)
branch  5 taken 5
        -:  165:        {
        2:  166:          ocount++;
        -:  167:        }
        7:  168:        if(board[i][1] == board[i][2])
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 1 (fallthrough)
branch  5 taken 6
        -:  169:        {
        1:  170:          ocount++;
        -:  171:        }
        7:  172:        if(board[i][1] == board[i][3])
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 6 (fallthrough)
branch  5 taken 1
        -:  173:        {
        6:  174:          ocount++;
        -:  175:        }
        -:  176:      }//else if
        -:  177:      //row counts
        9:  178:      xtotal.push_back(xcount);
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  179:      ototal.push_back(ocount);
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        -:  180:    }//for
        -:  181:
       15:  182:    for(int k = 0; k < BOARD_COLS; k++)
branch  0 taken 12 (fallthrough)
branch  1 taken 3
        -:  183:    {
       12:  184:      xcolcount = 0;
       12:  185:      ocolcount = 0;
        -:  186:
       12:  187:      if(board[1][k] == X)
call    0 returned 12
call    1 returned 12
branch  2 taken 5 (fallthrough)
branch  3 taken 7
        -:  188:      {
        5:  189:        xcolcount++;
        5:  190:        if(board[1][k] == board[0][k]){
call    0 returned 5
call    1 returned 5
call    2 returned 5
call    3 returned 5
branch  4 taken 3 (fallthrough)
branch  5 taken 2
        3:  191:          xcolcount++;
        -:  192:        }
        5:  193:        if(board[1][k] == board[2][k])
call    0 returned 5
call    1 returned 5
call    2 returned 5
call    3 returned 5
branch  4 taken 4 (fallthrough)
branch  5 taken 1
        -:  194:        {
        4:  195:          xcolcount++;
        -:  196:        }
        -:  197:      }//if
        7:  198:      else if(board[1][k] == O)
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        -:  199:      {
        7:  200:        ocolcount++;
        7:  201:        if(board[1][k] == board[0][k]){
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 3 (fallthrough)
branch  5 taken 4
        3:  202:          ocolcount++;
        -:  203:        }
        7:  204:        if(board[1][k] == board[2][k])
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 5 (fallthrough)
branch  5 taken 2
        -:  205:        {
        5:  206:          ocolcount++;
        -:  207:        }
        -:  208:      }//if
       12:  209:      xcoltotal.push_back(xcolcount);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  210:      ocoltotal.push_back(ocolcount);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
        -:  211:    }//for
        -:  212:
        3:  213:    int xlargest = 0;
        3:  214:    int olargest = 0;
        -:  215:
        -:  216:    //check columns
       15:  217:    for(int col = 0; col < BOARD_COLS; col++)
branch  0 taken 12 (fallthrough)
branch  1 taken 3
        -:  218:    {
       12:  219:      if(xcoltotal[col] > xlargest)
call    0 returned 12
branch  1 taken 4 (fallthrough)
branch  2 taken 8
        -:  220:      {
        4:  221:          xlargest = xcoltotal[col];
call    0 returned 4
        4:  222:          turn = X;
        -:  223:      }
        8:  224:      else if (ocoltotal[col] > olargest)
call    0 returned 8
branch  1 taken 4 (fallthrough)
branch  2 taken 4
        -:  225:      {
        4:  226:         olargest = ocoltotal[col];
call    0 returned 4
        4:  227:         turn = O;
        -:  228:      }
        -:  229:    }
        -:  230:    //check rows
       12:  231:    for(int row = 0; row < BOARD_ROWS; row++)
branch  0 taken 9 (fallthrough)
branch  1 taken 3
        -:  232:    {
        9:  233:      if(xtotal[row] > xlargest)
call    0 returned 9
branch  1 taken 1 (fallthrough)
branch  2 taken 8
        -:  234:      {
        1:  235:          xlargest = xtotal[row];
call    0 returned 1
        1:  236:          turn = X;
        -:  237:      }
        8:  238:      else if (ototal[row] > olargest)
call    0 returned 8
branch  1 taken 2 (fallthrough)
branch  2 taken 6
        -:  239:      {
        2:  240:         olargest = ototal[row];
call    0 returned 2
        2:  241:         turn = O;
        -:  242:      }
        -:  243:    }
        -:  244:
        -:  245:
        3:  246:    cout << ototal.size() << endl;
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        -:  247:    /*cout << "xcoltotal: ";
        -:  248:    for(int in = 0; in < xcoltotal.size(); in++)
        -:  249:    {
        -:  250:      cout << xcoltotal[in] << " ";
        -:  251:    }
        -:  252:    cout << endl;
        -:  253:
        -:  254:    cout << "ocoltotal: ";
        -:  255:    for(in = 0; in < ocoltotal.size(); in++)
        -:  256:    {
        -:  257:      cout << ocoltotal[in] << " ";
        -:  258:    }
        -:  259:    cout << endl;
        -:  260:
        -:  261:    cout << "xtotal: ";
        -:  262:    for(in = 0; in < xtotal.size(); in++)
        -:  263:    {
        -:  264:      cout << xtotal[in] << " ";
        -:  265:    }
        -:  266:    cout << endl;*/
        -:  267:
        3:  268:    int size = ototal.size();
call    0 returned 3
        3:  269:    cout << "ototal: ";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
       12:  270:    for(int in = 0; in < size; in++)
branch  0 taken 9 (fallthrough)
branch  1 taken 3
        -:  271:    {
        9:  272:      cout << ototal[in] << " ";
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        -:  273:    }
        3:  274:    cout << endl;
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  275:
        3:  276:    cout << "Checking who won ... ";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  277:    if(xlargest > olargest)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  278:    {
        1:  279:      cout << "X, streak: " << xlargest << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  280:      return turn;
        -:  281:    }
        2:  282:    else if (xlargest < olargest)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  283:    {
        1:  284:      cout << "O, streak: " << olargest << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  285:      return turn;
        -:  286:    }
        -:  287:    else
        -:  288:    {
        1:  289:      cout << "Tie\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  290:      cout << "x: " << xlargest << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  291:      cout << "o: " << olargest << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  292:      return Invalid;
        -:  293:    }
function _GLOBAL__sub_I__ZN6PiezasC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  294:}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
